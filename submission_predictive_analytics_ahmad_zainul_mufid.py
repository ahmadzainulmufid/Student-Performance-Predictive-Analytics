# -*- coding: utf-8 -*-
"""Submission Predictive Analytics_Ahmad Zainul Mufid.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LW-XNWJGr02RbtQ_TTR_0sr8X5BSvvhI

# Student Performance Predictive Analytics

Dataset: https://www.kaggle.com/datasets/larsen0966/student-performance-data-set

# Pendahuluan

Tema dari analisis ini adalah keuangan dimana hasilnya akan berupa model machine learning yang nanti dapat digunakan untuk memprediksi lulus atau tidaknya siswa dari data student performance

# Data Loading

berikut ini library yang akan di import
"""

# Commented out IPython magic to ensure Python compatibility.
import zipfile, math
import seaborn as sns
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
# %matplotlib inline

from sklearn import metrics
from sklearn import preprocessing
from sklearn.decomposition import PCA
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import mean_absolute_error
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.neighbors import KNeighborsRegressor
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
from sklearn.ensemble import RandomForestRegressor
from sklearn.ensemble import AdaBoostRegressor

from google.colab import files

"""menampilkan data"""

df = pd.read_csv('/content/student-por.csv')
df.head()

"""# Exploratory Data Analysis

Deskripsi Variabel

*   School : Sekolah siswa (binary: 'GP' - Gabriel Pereira atau 'MS' - Mousinho da Silveira)
*   sex : Jenis kelamin siswa ('F' - female atau 'M' - male)
*   age : Usia siswa (dalam tahun)
*   address : Lokasi rumah siswa ('U' - urban, 'R' - rural)
*   famsize : Ukuran keluarga ('LE3' - <=3 anggota, 'GT3' - >3 anggota)
*   Pstatus : Status orang tua tinggal bersama ('T' - together, 'A' - apart)
*   Medu : Tingkat pendidikan ibu (0=none, 1=primary, 2=5th-9th grade, 3=secondary, 4=higher)
*   Fedu : Tingkat pendidikan ayah (0=none, 1=primary, 2=5th-9th grade, 3=secondary, 4=higher)
*   Mjob : Pekerjaan ibu (teacher, health care, services, at_home, other)
*   Fjob : Pekerjaan ayah (teacher, health care, services, at_home, other)
*   reason : Alasan memilih sekolah (home, reputation, course preference, other)
*   guardian : Wali siswa (mother, father, other)
*   traveltime : Waktu perjalanan ke sekolah (1=<15min, 2=15-30min, 3=30min-1hr, 4=>1hr)
*   studytime : Waktu belajar mingguan (1=<2h, 2=2-5h, 3=5-10h, 4=>10h)
*   failures : Jumlah kegagalan dalam kelas sebelumnya
*   schoolsup : Dukungan tambahan dari sekolah (yes atau no)
*   famsup : Dukungan tambahan dari keluarga (yes atau no)
*   paid : Mengikuti les privat mata pelajaran matematika (yes atau no)
*   activities : Mengikuti aktivitas ekstrakurikuler (yes atau no)
*   nursery : Pernah ikut taman kanak-kanak (yes atau no)
*   higher : Keinginan untuk melanjutkan pendidikan tinggi (yes atau no)
*   internet : Akses internet di rumah (yes atau no)
*   romantic : Berstatus pacaran (yes atau no)
*   famrel : Kualitas hubungan keluarga (skala 1 - sangat buruk sampai 5 - sangat baik)
*   freetime : Waktu luang setelah sekolah (skala 1 - sangat sedikit sampai 5 - sangat banyak)
*   goout : Frekuensi keluar dengan teman (skala 1 - sangat jarang sampai 5 - sangat sering)
*   Dalc : Konsumsi alkohol harian (skala 1 - sangat rendah sampai 5 - sangat tinggi)
*   Walc : Konsumsi alkohol saat akhir pekan (skala 1 - sangat rendah sampai 5 - sangat tinggi)
*   health : Kondisi kesehatan saat ini (skala 1 - sangat buruk sampai 5 - sangat baik)
*   absences : Jumlah ketidakhadiran di sekolah
*   G1 : Nilai ujian semester 1 (0-20)
*   G2 : Nilai ujian semester 2 (0-20)
*   G3 : Nilai ujian semester 3 (0-20)
"""

df.info()

df.describe()

"""mencari nilai yang missing"""

print(df.isnull().sum())

"""mencari kata unik"""

print(df.select_dtypes(include='object').nunique())

"""melihat data distribusi kelulusan siswa jika G3 lebih dari sama dengan 10"""

# Membuat kolom baru: 'pass' = 1 kalau G3 >= 10, else 0
df['pass'] = df['G3'].apply(lambda x: 1 if x >= 10 else 0)

# Plot distribusi pass/fail
plt.figure(figsize=(6,4))
sns.countplot(x='pass', data=df, palette='pastel')
plt.title('Distribusi Kelulusan Siswa')
plt.xlabel('0 = Gagal, 1 = Lulus')
plt.ylabel('Jumlah Siswa')
plt.show()

print(df['pass'].value_counts(normalize=True) * 100)

"""menampilkan histogram nilai tiap semester 1-3"""

# Plot histogram nilai
fig, axes = plt.subplots(1, 3, figsize=(18, 5))

sns.histplot(df['G1'], bins=15, kde=True, ax=axes[0], color='skyblue')
axes[0].set_title('Distribusi Nilai G1')

sns.histplot(df['G2'], bins=15, kde=True, ax=axes[1], color='lightgreen')
axes[1].set_title('Distribusi Nilai G2')

sns.histplot(df['G3'], bins=15, kde=True, ax=axes[2], color='salmon')
axes[2].set_title('Distribusi Nilai G3')

plt.tight_layout()
plt.show()

"""menampilkan korelasi antar variabel"""

# Korelasi hanya untuk kolom numerik
plt.figure(figsize=(12,10))
# Select only numerical columns before calculating correlation
numerical_df = df.select_dtypes(include=np.number)
sns.heatmap(numerical_df.corr(), annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation Heatmap')
plt.show()

"""dari gambar diatas bahwa
Korelasi punya nilai dari -1 sampai +1:

+1 → hubungan positif sempurna (kalau satu naik, yang lain juga naik persis).

-1 → hubungan negatif sempurna (kalau satu naik, yang lain turun persis).

0 → tidak ada hubungan linear.

Warna:

Merah → Korelasi positif kuat.

Biru → Korelasi negatif kuat.

Putih/Pucat → Korelasi mendekati nol.

Dari heatmap kamu:

G1, G2, dan G3 sangat berkorelasi positif satu sama lain (0.86, 0.83, 0.92):

Ini wajar, karena G1 (nilai ujian 1), G2 (ujian 2), dan G3 (nilai akhir) biasanya saling berhubungan.

G3 berkorelasi cukup kuat dengan pass (0.66):

Artinya, nilai G3 berhubungan positif dengan lulus atau tidaknya siswa (makes sense kan, nilai akhir tinggi = kemungkinan lulus tinggi).

failures berkorelasi negatif dengan G1, G2, G3, dan pass (sekitar -0.38):

Semakin banyak kegagalan sebelumnya, semakin rendah nilai dan peluang lulus.

Medu (pendidikan ibu) dan Fedu (pendidikan ayah) juga berkorelasi satu sama lain (0.65):

Cukup logis, karena pasangan biasanya memiliki tingkat pendidikan yang mirip.

Fitur lain seperti health, absences, freetime, goout punya korelasi kecil banget terhadap pass — artinya mungkin pengaruhnya kecil terhadap lulus/tidaknya siswa.

code dibawah ini untuk menampilkan kelulusan berdasarkan jenis kelamin, agar nantinya bisa tahu lebih jelas
"""

plt.figure(figsize=(6,4))
sns.countplot(x='sex', hue='pass', data=df, palette='Set2')
plt.title('Kelulusan berdasarkan Jenis Kelamin')
plt.xlabel('Jenis Kelamin')
plt.ylabel('Jumlah Siswa')
plt.legend(title='Lulus', labels=['Gagal', 'Lulus'])
plt.show()

"""lalu absensi juga, ditampilkan distribusinya"""

plt.figure(figsize=(6,4))
sns.boxplot(x=df['absences'], color='orange')
plt.title('Distribusi Absensi Siswa')
plt.show()

"""# Data Preparation

fitur yang digunakan
"""

selected_features = ['sex', 'age', 'studytime', 'failures',
                     'schoolsup', 'famsup', 'paid',
                     'activities', 'higher', 'internet',
                     'romantic', 'famrel', 'freetime',
                     'goout', 'Dalc', 'Walc', 'health',
                     'absences', 'G1', 'G2', 'G3']

data = df[selected_features].copy()

"""membuat target lulus/tidak dari data G3"""

# Misal: G3 >= 10 dianggap lulus
data['pass'] = data['G3'].apply(lambda x: 1 if x >= 10 else 0)

# Drop kolom G3 karena sudah dipakai untuk label
data = data.drop(columns=['G3'])

"""encode fitur kategorikal"""

# Import LabelEncoder
from sklearn.preprocessing import LabelEncoder

# Cek kolom mana saja yang bertipe object
categorical_cols = data.select_dtypes(include=['object']).columns

# Encode semua kolom kategorikal
le = LabelEncoder()
for col in categorical_cols:
    data[col] = le.fit_transform(data[col])

"""split data train test"""

# Pisahkan fitur (X) dan target (y)
X = data.drop(columns=['pass'])
y = data['pass']

# Split data: 80% training, 20% testing
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42, stratify=y)

"""standrisasi fitur numerik"""

# Standarisasi semua fitur
scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

"""# Model Development

menggunakan 3 models untuk membandingkan siapa yang lebih bagus dalam klasifikasi prediksi lulus atau tidak
"""

from sklearn.ensemble import RandomForestClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.svm import SVC

models = {
    "Random Forest": RandomForestClassifier(random_state=42),
    "Logistic Regression": LogisticRegression(max_iter=1000, random_state=42),
    "SVM": SVC(random_state=42)
}

# Buat tempat untuk menyimpan hasil evaluasi
results = {}

"""evaluasi dengan acc,prec,rec,f1. sehingga nantinya model mana yang paling bagus evaluasi"""

# Training, prediksi, dan evaluasi semua model
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix, classification_report # Import classification_report

for name, model in models.items():
    # Training
    model.fit(X_train, y_train)

    # Prediksi
    y_pred = model.predict(X_test)

    # Evaluasi
    acc = accuracy_score(y_test, y_pred)
    prec = precision_score(y_test, y_pred)
    rec = recall_score(y_test, y_pred)
    f1 = f1_score(y_test, y_pred)

    # Simpan hasil
    results[name] = {
        "Accuracy": acc,
        "Precision": prec,
        "Recall": rec,
        "F1-Score": f1
    }

    # Print laporan
    print(f"Model: {name}")
    print(classification_report(y_test, y_pred))
    print("-" * 40)

    # Plot confusion matrix
    cm = confusion_matrix(y_test, y_pred)
    plt.figure(figsize=(5,4))
    sns.heatmap(cm, annot=True, fmt='d', cmap='Blues')
    plt.title(f'Confusion Matrix - {name}')
    plt.xlabel('Predicted')
    plt.ylabel('Actual')
    plt.show()

"""menampilkan hasil agar lebih jelas"""

# Tampilkan hasil evaluasi dalam bentuk tabel
results_df = pd.DataFrame(results).T
print("Hasil Evaluasi Semua Model:")
print(results_df)

"""ini adalah perbandingan evaluasi dari ketiga model sebelumnya, yang dimana model rf itu lebih bagus ketimbang keduanya"""

import matplotlib.pyplot as plt

# Buat daftar metric yang mau divisualisasikan
metrics = ['Accuracy', 'Precision', 'Recall', 'F1-Score']

# Set ukuran figure
plt.figure(figsize=(14, 8))

# Loop untuk membuat 4 subplot (1 untuk tiap metric)
for i, metric in enumerate(metrics, 1):
    plt.subplot(2, 2, i)
    plt.bar(results_df.index, results_df[metric], color=['skyblue', 'lightgreen', 'salmon'])
    plt.title(metric)
    plt.ylim(0, 1)  # karena semua nilai antara 0-1
    plt.ylabel('Score')
    plt.xticks(rotation=15)

plt.suptitle('Perbandingan Model berdasarkan Metrik Evaluasi', fontsize=16)
plt.tight_layout(rect=[0, 0, 1, 0.95])
plt.show()

"""memprediksi dengan model rf, karena evaluasi sebelumnya paling bagus dan nantinya akan menampilkan hasil prediksi siswa lulus atau tidak"""

# Menggunakan model terbaik (misalnya Random Forest)
best_model = models["Random Forest"]

# Melakukan prediksi pada data testing
y_pred = best_model.predict(X_test)

# Menambahkan hasil prediksi ke DataFrame untuk melihat hasilnya
df_test_predictions = pd.DataFrame(X_test) # X_test was a numpy array
df_test_predictions.columns = X.columns # Assign column names
df_test_predictions['Predicted Outcome'] = y_pred

# Menyaring siswa yang diprediksi lulus atau tidak lulus
df_test_predictions['Predicted Result'] = df_test_predictions['Predicted Outcome'].apply(lambda x: 'Lulus' if x == 1 else 'Tidak Lulus')

# Menampilkan hasil prediksi
print(df_test_predictions[['age', 'sex', 'studytime', 'failures', 'G1', 'G2', 'Predicted Result']])

# Misalnya, kamu ingin melihat berapa banyak yang lulus
lulus_count = df_test_predictions['Predicted Result'].value_counts()
print(lulus_count)

"""menampilkan klasifikasi report"""

from sklearn.metrics import classification_report, confusion_matrix

# Evaluasi hasil prediksi
print("Classification Report:\n", classification_report(y_test, y_pred))
print("Confusion Matrix:\n", confusion_matrix(y_test, y_pred))

"""menganalisis hasil dan interpretasi untuk rf"""

feature_importance = pd.DataFrame({
    'Feature': X.columns,
    'Importance': best_model.feature_importances_
}).sort_values(by='Importance', ascending=False)

print(feature_importance)

"""# Penutup

Model untuk memprediksi kelulusan siswa yang lulus atau tidak telah selesai dibuat dan dari hasil pengujian, ketiga model yang dibuat memiliki performa yang baik dan dapat digunakan untuk memprediksi data sebenarnya hanya saja model terbaik ialah model RF karena RF memiliki nilai evaluasi yang tinggi dibandingkan dengan model lain.
"""